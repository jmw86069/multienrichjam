% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jam-points-to-ahull.R
\name{make_point_hull}
\alias{make_point_hull}
\title{Make alpha hull from points}
\usage{
make_point_hull(
  x,
  expand = 0.1,
  buffer = NULL,
  alpha = NULL,
  seed = 123,
  col = "#FF000033",
  border = "#FF0000FF",
  lwd = 2,
  lty = 1,
  max_iterations = 10,
  do_plot = FALSE,
  add = FALSE,
  hull_method = c("default", "alphahull", "igraph", "sf", "chull"),
  smooth = TRUE,
  shape = 1/2,
  label = NULL,
  label_preset = "bottom",
  label_adj_preset = label_preset,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{\code{numeric} matrix with 2 columns that contains the
coordinate of each point.}

\item{expand}{\code{numeric} value indicating the buffer width around
each point, scaled based upon the total range of coordinates,
used only when \code{buffer} is not supplied.}

\item{buffer}{\code{numeric} value indicating the absolute buffer width
around each point. This value is used if provided, otherwise
\code{expand} is used to derive a value for \code{buffer}.}

\item{alpha}{\code{numeric} value passed to \code{alphahull::ashape()} when
hull_method is \code{"alphahull"}. This value determines the level of
detail of the resulting hull.}

\item{seed}{\code{numeric} seed used with \code{set.seed()} to define reproducible
behavior.}

\item{lwd, lty}{line width and line type parameters, respectively.}

\item{max_iterations}{\code{integer} number of attempts to call
\code{alphahull::ashape()} with varying values of \code{alpha}. Each iteration
checks to confirm the resulting polygon includes all input points.}

\item{do_plot}{\code{logical} indicating whether to plot the polygon
output.}

\item{add}{\code{logical} used when \code{do_plot=TRUE} to indicate whether
the hull should be drawn onto an existing plot device, or whether
to open a new plot prior to drawing the hull.}

\item{hull_method}{\code{character} string indicating the hull method to use:
\itemize{
\item \code{"default"} - will use \code{"alphahull"} if the \code{alphahull} R package
is available.
\item \code{"alphahull"} - use \code{alphahull::ashape()} which is the preferred
method, in fact the only available option that will allow a concave
shape in the output.
\item \code{"igraph"} - calls hidden function \code{igraph:::convex_hull()} as
used when drawing \code{mark.groups} around grouped nodes.
\item \code{"sf"} - calls \code{sf::st_convex_hull()}, with same effective output
as \code{"igraph"}.
\item \code{"chull"} - calls \code{grDevices::chull()}, again with same effective
output as \code{"igraph"}, but with benefit of not incurring additional
R package dependencies.
}}

\item{smooth}{\code{logical} indicating whether to smooth the final polygon
using \code{graphics::xspline()}.}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}

\item{color, border}{\code{character} colors used when \code{do_plot=TRUE} to draw
the resulting hull polygon.}
}
\value{
\code{numeric} matrix with polygon coordinates, where
each polygon is separated by one row that contains \code{NA}
values. This output is sufficient for vectorized plotting
in base R graphics using \code{graphics::polygon()}.
}
\description{
Make alpha hull from points
}
\details{
This function makes an alpha hull around points, calling
\code{alphahull::ashape()} then piecing together the somewhat
random set of outer edges into a coherent polygon.
}
\examples{
set.seed(12)
n <- 22
xy <- cbind(x=sample(seq_len(n), size=n, replace=TRUE),
   y=sample(seq_len(n), size=n, replace=TRUE));
xy <- rbind(xy, xy[1,,drop=FALSE])
x4 <- sf::st_multipoint(xy)

if (jamba::check_pkg_installed("alphahull")) {
   plot(x4, col="red", pch=20, cex=3,
      main="hull_method='alphahull'")
   phxy <- make_point_hull(x=xy, expand=0.05, do_plot=TRUE,
      hull_method="alphahull",
      add=TRUE, xpd=TRUE)
}

plot(x4, col="red", pch=20, cex=3,
   main="hull_method='chull'")
phxy2 <- make_point_hull(x=xy, expand=0.05, do_plot=TRUE,
   add=TRUE, verbose=TRUE, xpd=TRUE, hull_method="chull")

plot(x4, col="red", pch=20, cex=3,
   main="hull_method='igraph'")
phxy2 <- make_point_hull(x=xy, expand=0.05, do_plot=TRUE,
   add=TRUE, verbose=TRUE, xpd=TRUE, hull_method="igraph")

plot(x4, col="red", pch=20, cex=3,
   main="hull_method='sf'")
phxy2 <- make_point_hull(x=xy, expand=0.05, do_plot=TRUE,
   add=TRUE, verbose=TRUE, xpd=TRUE, hull_method="sf")

}
\seealso{
Other jam utility functions: 
\code{\link{avg_angles}()},
\code{\link{avg_colors_by_list}()},
\code{\link{call_fn_ellipsis_deprecated}()},
\code{\link{cell_fun_bivariate}()},
\code{\link{collapse_mem_clusters}()},
\code{\link{colorRamp2D}()},
\code{\link{deconcat_df2}()},
\code{\link{display_colorRamp2D}()},
\code{\link{enrichList2geneHitList}()},
\code{\link{filter_mem_genes}()},
\code{\link{filter_mem_sets}()},
\code{\link{find_colname}()},
\code{\link{gsubs}()},
\code{\link{handle_igraph_param_list}()},
\code{\link{isColorBlank}()},
\code{\link{make_legend_bivariate}()},
\code{\link{mem_find_overlap}()},
\code{\link{order_colors}()},
\code{\link{rank_mem_clusters}()},
\code{\link{rotate_coordinates}()},
\code{\link{subgraph_jam}()},
\code{\link{subset_mem}()},
\code{\link{xyAngle}()}
}
\concept{jam utility functions}
