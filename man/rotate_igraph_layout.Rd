% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamenrich-rotate.R
\name{rotate_igraph_layout}
\alias{rotate_igraph_layout}
\title{Rotate igraph layout coordinates}
\usage{
rotate_igraph_layout(
  g = NULL,
  degrees = 0,
  reflect = c("none", "x", "y", "z"),
  center = NULL,
  center_rule = c("median", "origin", "mean", "min", "max"),
  rotation_axes = c(1, 2),
  spread_labels = TRUE,
  do_reorder = FALSE,
  layout = NULL,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{g}{\code{igraph} object that contains layout coordinates in
graph attributes, for example \code{igraph::graph_attr(g, "layout")}.}

\item{degrees}{numeric value indicating the degrees to rotate
layout coordinates, where 360 degrees is one complete rotation.}

\item{reflect}{\code{character} string indicating one or more axes
to reflect coordinates, or \code{"none"} to reflect no axis.}

\item{center}{\code{numeric} coordinates to use as the center, or
\code{center=NULL} to calculate the center using \code{center_rule}.}

\item{center_rule}{\code{character} string indicating which rule to
apply to determine the center coordinates, when \code{center=NULL}:
\code{"origin"} uses c(0, 0); \code{"mean"} uses the mean of each axis;
\code{"median"} uses the median of each axis; \code{"min"} uses the minimum
of each axis; \code{"max"} uses the max of each axis.}

\item{rotation_axes}{\code{integer} vector indicating which axis
coordinates to rotate, by default \code{c(1, 2)} uses the first
two axes.}

\item{spread_labels, do_reorder}{\code{logical} indicating whether to
call \code{spread_igraph_labels()}, and subsequently
whether to call \code{reorderIgraphNodes()}.}

\item{layout}{\code{matrix} with 2 or more columns, when defined this
layout is used and not the layout from the \code{g} \code{igraph} object.}

\item{...}{additional arguments are passed to
\code{spread_igraph_labels()} which calls \code{reorderIgraphNodes()} when
\code{spread_labels=TRUE} and \code{do_reorder=TRUE}, or to
\code{reorderIgraphNodes()} when \code{spread_labels=FALSE} and
\code{do_reorder=TRUE}. Notably, the optional argument \code{sortAttributes}
can be passed through those functions to affect the node sort
priority.}
}
\value{
\code{igraph} when input \code{g} is supplied, otherwise \verb{numeric matrix}.
}
\description{
Rotate igraph layout coordinates, optionally after reflecting coordinates
along one or more coordinate axes.
}
\details{
This function rotates igraph layout coordinates by calling
the function \code{rotate_coordinates()}. The input can either be
\code{g} as \code{igraph} object, or \code{layout} as a numeric \code{matrix}.

Note that the \code{reflect} is applied before \code{degrees}. To change
the order, call this function multiple times.

When both \code{g} and \code{layout} are supplied, the coordinates are
used from \code{layout}, rotated, then stored in the \code{g} \code{igraph} object
as a graph attribute, using \code{igraph::graph_attr(g, "layout")}.

When only \code{g} is supplied, it is expected to contain
layout coordinates in graph attributes, obtained with
\code{igraph::graph_attr(g, "layout")}.

When only \code{layout} is supplied, and no \code{g} \code{igraph} object
is supplied, this function serves only as a wrapper to
\code{rotate_coordinates()}.

Rotation code kindly contributed by Don MacQueen to the \code{maptools}
package, and is reproduced here to avoid a dependency on \code{maptools}
and therefore the \code{sp} package.

This function also calls other useful helper functions,
when \code{spread_labels=TRUE} it calls \code{spread_igraph_labels()} to
position labels around each node based upon the angle of
incoming edges, which has the effect of reducing label overlaps.
When \code{do_reorder=TRUE} it calls \code{reorderIgraphNodes()} which
sorts nodes within a nodeset by color then by label, to help
visually group similar nodes together in equivalent positions
in the layout.
}
\examples{
layout <- cbind(0:10, 0:10);
layout_rot50 <- rotate_igraph_layout(layout=layout, degrees=50);
layout_rot40_ctrmean <- rotate_igraph_layout(layout=layout, degrees=40, center_rule="mean");
plot(rbind(layout, layout_rot50, layout_rot40_ctrmean),
   col=rep(c("darkorchid", "darkorange1", "dodgerblue"), each=11),
   pch=rep(c(17, 20, 18), each=11),
   cex=2);

if (require(igraph)) {
   g <- igraph::make_graph( ~ A-B-C-D-A, E-A:B:C:D,
      F-G-H-I-F, J-F:G:H:I,
      K-L-M-N-K, O-K:L:M:N,
      P-Q-R-S-P, T-P:Q:R:S,
      B-F, E-J, C-I, L-T, O-T, M-S,
      C-P, C-L, I-L, I-P);
   g <- relayout_with_qfr(g, repulse=8);
   g2 <- rotate_igraph_layout(g, degrees=45);
   opar <- par("mfrow"=c(1,2));
   on.exit(par(opar));
   jam_igraph(g,
      main="original layout",
      node_factor=0.6,
      label_dist_factor=7);
   jam_igraph(g2,
      main="rotated 45 degrees",
      node_factor=0.6,
      label_dist_factor=7);
}

}
\seealso{
Other jam cnet igraph functions: 
\code{\link{adjust_cnet_nodeset}()},
\code{\link{adjust_cnet_set_relayout_gene}()},
\code{\link{apply_nodeset_spacing}()},
\code{\link{get_cnet_nodeset}()},
\code{\link{nudge_igraph_node}()}

Other jam igraph functions: 
\code{\link{cnet2df}()},
\code{\link{cnet2im}()},
\code{\link{cnetplotJam}()},
\code{\link{cnetplot_internalJam}()},
\code{\link{color_edges_by_nodes_deprecated}()},
\code{\link{color_edges_by_nodes}()},
\code{\link{drawEllipse}()},
\code{\link{edge_bundle_bipartite}()},
\code{\link{edge_bundle_nodegroups}()},
\code{\link{enrichMapJam}()},
\code{\link{fixSetLabels}()},
\code{\link{get_bipartite_nodeset}()},
\code{\link{igraph2pieGraph}()},
\code{\link{jam_igraph}()},
\code{\link{jam_plot_igraph}()},
\code{\link{layout_with_qfrf}()},
\code{\link{layout_with_qfr}()},
\code{\link{memIM2cnet}()},
\code{\link{mem_multienrichplot}()},
\code{\link{rectifyPiegraph}()},
\code{\link{relayout_with_qfr}()},
\code{\link{removeIgraphBlanks}()},
\code{\link{removeIgraphSinglets}()},
\code{\link{reorderIgraphNodes}()},
\code{\link{spread_igraph_labels}()},
\code{\link{subgraph_jam}()},
\code{\link{subsetCnetIgraph}()},
\code{\link{subset_igraph_components}()},
\code{\link{with_qfr}()}
}
\concept{jam cnet igraph functions}
\concept{jam igraph functions}
