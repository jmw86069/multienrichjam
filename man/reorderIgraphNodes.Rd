% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamenrich-igraph.r
\name{reorderIgraphNodes}
\alias{reorderIgraphNodes}
\alias{reorder_igraph_nodes}
\title{Re-order igraph nodes}
\usage{
reorderIgraphNodes(
  g,
  sortAttributes = c("pie.color", "pie.color.length", "pie.border", "pie.border.length",
    "coloredrect.color", "coloredrect.border", "color", "frame.color", "label", "name"),
  nodeSortBy = c("x", "-y"),
  orderByAspect = TRUE,
  aspectThreshold = -1.25,
  layout = NULL,
  nodesets = NULL,
  colorV = NULL,
  verbose = FALSE,
  ...
)

reorder_igraph_nodes(
  g,
  sortAttributes = c("pie.color", "pie.color.length", "pie.border", "pie.border.length",
    "coloredrect.color", "coloredrect.border", "color", "frame.color", "label", "name"),
  nodeSortBy = c("x", "-y"),
  orderByAspect = TRUE,
  aspectThreshold = -1.25,
  layout = NULL,
  nodesets = NULL,
  colorV = NULL,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{g}{\code{igraph} object, typically expected to have a fixed
graph layout stored as \code{igraph::graph_attr(g, "layout")},
or supplied via \code{layout} argument.}

\item{sortAttributes}{\code{character} vector of node attribute
names, to be applied in order when sorting nodes.}

\item{nodeSortBy}{\code{character} vector containing \code{"x"} and
\code{"y"} indicating the primary axis used to sort nodes.
Note that sort order can be reversed by prepending "-",
for example \code{"-x"} or \code{"-y"}.}

\item{orderByAspect}{\code{logical} indicating whether the aspect ratio
of each nodeset determines the sort order. When \code{orderByAspect=TRUE}
it ignores \code{nodeSortBy} and uses each nodeset aspect ratio
to determine the order. Note that the original values for \code{nodeSortOrder}
are retained, specifically the directional sign for each axis,
such that \code{"x"} and \code{"-y"} will either become \code{c("x", "-y")} or
\code{c("-y", "x")}. This way, other locales for which bottom-right
to top-left ordering is more natural, use \code{nodeSortBy=c("-x", "y")}
to preserve that order. It will become \code{c("y", "-x")} for tall
aspect nodesets. See \code{aspectThreshold} below.}

\item{aspectThreshold}{\code{numeric} indicating the aspect ratio
threshold below which nodes are sorted \code{c("-y", "x")} top to bottom.
All aspect ratios (x/y) above this threshold are sorted
\code{c("x", "-y")} left to right. Aspect ratios with x < y are
internally converted to negative ratios (-y/x) such that -1.25
is equivalent to x/y=0.8 for example.}

\item{layout}{\code{numeric} matrix of node coordinates, or
function used to produce layout coordinates. When layout
is \code{NULL}, this function tries to use graph attribute
\code{igraph::graph_attr(g, "layout")}, otherwise
the \code{relayout_with_qfr()} is called.}

\item{nodesets}{\code{character} with optional subset of nodesets to
apply re-ordering. Each value must match names generated
by \code{get_cnet_nodeset()}, otherwise it will be ignored.}

\item{colorV}{optional \code{character} vector that contains R colors,
used to order the colors in attributes such as \code{"pie.color"}
and \code{"coloredrect.color"}.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\value{
igraph with nodes positioned to order
nodes by color. The layout coordinates are stored in
the graph attribute \code{"layout"}, accessible with
\code{g$layout} or \code{graph_attr(g, "layout")}.
When there are not multiple nodes sharing
the same neighbors, the original igraph object is
returned, with the addition of layout coordinates.
}
\description{
Re-order igraph nodes
}
\details{
This function takes an igraph and a layout in the
form of coordinates, or a function used to produce
coordinates. It repositions nodes within equivalent
positions, ordering nodes by color along either the
\code{"x"} or \code{"y"} direction.

Equivalent node positions are those with the same
neighboring nodes. For example if node \code{"A"} and
node \code{"B"} both have neighbors \code{c("D", "E", "F")}
then nodes \code{"A"} and \code{"B"} are considered equivalent,
and will be reordered by their color.

This function is particularly effective with concept
network (Cnet) graphs, where multiple terms may
be connnected to the same concept. For MultiEnrichmap,
it typically works when multiple genes are connected
to the same pathways. When this happens, the genes
are sorted to group the colors.
}
\examples{
require(igraph)
   c3 <- c("red", "gold", "blue");
   c3l <- list(c3[1], c3[2], c3[3],
      c3[c(1,2)], c3[c(1,3)], c3[c(2,3)],
      c3[c(1,2,3)]);
   set.seed(123);
   pc <- c(c3l[1], sample(rep(c3l, c(6,5,5, 4, 1, 4, 4))))
   x <- lapply(pc, function(i){
      jamba::nameVector(i, paste0("group_", i))
   })
   g2 <- igraph::graph_from_edgelist(directed=FALSE,
      as.matrix(data.frame(
         node1=rep("Pathway", length(x)),
         node2=paste0("Gene", jamba::colNum2excelName(seq_along(x))))));
   V(g2)$pie.color <- x[c(1,seq_along(pc))];
   V(g2)$shape <- "pie";
   V(g2)$pie <- lapply(lengths(V(g2)$pie.color), function(i){
      rep(1, i)
   });
   V(g2)$frame.color <- "grey80";
   V(g2)$pie.border <- NA;
   V(g2)$color <- lapply(V(g2)$pie.color, colorjam::blend_colors)

   g2 <- relayout_with_qfr(g2, repulse=7, do_reorder=FALSE);
   g2b <- spread_igraph_labels(g2, do_reorder=FALSE)
   igraph::V(g2b)$label.family <- "Arial"

   withr::with_par(list(mar=c(1, 1, 4, 1), xpd=TRUE), {
   jam_igraph(g2b,
      main="Unordered",
      label_dist_factor=3,
      label_factor=0.7,
      node_factor=1.2,
      use_shadowText=TRUE)
   jam_igraph(reorderIgraphNodes(g2b),
      main="reorder_igraph_nodes()",
      label_dist_factor=3,
      label_factor=0.7,
      node_factor=1.2,
      use_shadowText=TRUE);
   jam_igraph(
      reorderIgraphNodes(g2b, nodeSortBy=c("-y","x"), orderByAspect=FALSE),
      main='reorderIgraphNodes(nodeSortBy=c("-y", "x"))',
      label_dist_factor=3,
      label_factor=0.7,
      node_factor=1.2,
      use_shadowText=TRUE);

   jam_igraph(
      reorderIgraphNodes(g2b,
         nodeSortBy=c("-y", "x"), orderByAspect=FALSE,
         sortAttributes=c("-pie.color.length", "pie.color",
            "color", "label", "name")),
      main="reorder_igraph_nodes() by pie.color.length",
      label_dist_factor=3,
      label_factor=0.7,
      node_factor=1.2,
      use_shadowText=TRUE);
   })

   g2c <- g2b;
   set.seed(12)
   V(g2c)$frame.color <- sample(c("firebrick3", "#DDDDDD", "dodgerblue3"),
      replace=TRUE, size=igraph::vcount(g2c))
   V(g2c)$frame.width <- 3;
   V(g2c)$pie.lwd <- 3;
   withr::with_par(list("lwd"=4, mar=c(1, 1, 4, 1), xpd=TRUE), {
   jam_igraph(reorderIgraphNodes(g2c,
      nodeSortBy=c("-y", "x")),
      main="reorder_igraph_nodes() including frame.color",
      label_dist_factor=3,
      label_factor=0.7,
      node_factor=1.2,
      use_shadowText=TRUE);
   })

   g2d <- reorderIgraphNodes(g2b);
   set.seed(12)
   mn <- (lengths(V(g2d)$pie.color) > 1);
   V(g2d)[!mn]$frame.color <- sample(c("firebrick3", "#DDDDDD", "dodgerblue3"),
      replace=TRUE, size=sum(!mn))
   V(g2d)$pie.border <- rep(list(character(0)), vcount(g2d))
   V(g2d)[mn]$pie.border <- lapply(which(mn), function(i){
      jamba::nameVector(
         sample(c("firebrick3", "#DDDDDD", "dodgerblue3"),
            replace=TRUE, size=lengths(V(g2d)[i]$pie.color)),
         names(V(g2d)[i]$pie.color[[1]]))
   })
   g2e <- reorderIgraphNodes(g2d,
      nodeSortBy=c("-y", "x"));
   withr::with_par(list("lwd"=4, mar=c(1, 1, 4, 1), xpd=TRUE), {
   withr::with_options(list("inner_pie_border"=TRUE), {
   jam_igraph(g2e,
      main="reorder_igraph_nodes() including frame.color",
      label_dist_factor=3,
      label_factor=0.7,
      node_factor=1.2,
      use_shadowText=TRUE);
   })})

   # frame color sorting
   g2f <- g2e;
   igraph::V(g2f)["GeneV"]$frame.color <- "green";
   igraph::V(g2f)["GeneE"]$frame.color <- "green";
   withr::with_par(list("lwd"=5, mar=c(1, 1, 4, 1), xpd=TRUE), {
   withr::with_options(list("inner_pie_border"=TRUE), {
   jam_igraph(g2f,
      main="reorder_igraph_nodes() including frame.color",
      label_dist_factor=3,
      label_factor=0.7,
      node_factor=1.2,
      use_shadowText=TRUE);
   })})


}
\seealso{
Other jam igraph functions: 
\code{\link{cnet2df}()},
\code{\link{cnet2im}()},
\code{\link{cnetplotJam}()},
\code{\link{cnetplot_internalJam}()},
\code{\link{color_edges_by_nodegroups}()},
\code{\link{color_edges_by_nodes}()},
\code{\link{color_edges_by_nodes_deprecated}()},
\code{\link{color_nodes_by_nodegroups}()},
\code{\link{communities2nodegroups}()},
\code{\link{drawEllipse}()},
\code{\link{edge_bundle_bipartite}()},
\code{\link{edge_bundle_nodegroups}()},
\code{\link{enrichMapJam}()},
\code{\link{fixSetLabels}()},
\code{\link{flip_edges}()},
\code{\link{get_bipartite_nodeset}()},
\code{\link{highlight_edges_by_node}()},
\code{\link{igraph2pieGraph}()},
\code{\link{jam_igraph}()},
\code{\link{jam_plot_igraph}()},
\code{\link{label_communities}()},
\code{\link{layout_with_qfr}()},
\code{\link{layout_with_qfrf}()},
\code{\link{mem2emap}()},
\code{\link{memIM2cnet}()},
\code{\link{mem_multienrichplot}()},
\code{\link{nodegroups2communities}()},
\code{\link{rectifyPiegraph}()},
\code{\link{relayout_with_qfr}()},
\code{\link{removeIgraphBlanks}()},
\code{\link{removeIgraphSinglets}()},
\code{\link{rotate_igraph_layout}()},
\code{\link{spread_igraph_labels}()},
\code{\link{subgraph_jam}()},
\code{\link{subsetCnetIgraph}()},
\code{\link{subset_igraph_components}()},
\code{\link{sync_igraph_communities}()},
\code{\link{with_qfr}()}
}
\concept{jam igraph functions}
