% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamenrich-plot.R
\name{mem_multienrichplot}
\alias{mem_multienrichplot}
\title{MultiEnrichMap plot}
\usage{
mem_multienrichplot(
  mem,
  overlap = 0.1,
  overlap_count = 2,
  do_plot = TRUE,
  do_legend = TRUE,
  remove_blanks = TRUE,
  remove_singlets = TRUE,
  spread_labels = TRUE,
  y_bias = 1,
  label_edges = c("overlap_count", "count", "overlap", "label", "none"),
  edge_cex = 1,
  node_cex = 0.8,
  node_size = 5,
  edge_color = "#55555588",
  frame_color = "#55555500",
  shape = "pie",
  repulse = 3.7,
  sets = NULL,
  rescale = TRUE,
  edge_bundling = "connections",
  main = "MultiEnrichMap\\noverlap >= {overlap}, overlap_count >= {overlap_count}",
  ...
)
}
\arguments{
\item{mem}{\code{list} object output from \code{multiEnrichMap()}, specifically
containing elements \verb{"multiEnrichMap","multiEnrichMap2"} which
are expected to be \code{igraph} objects.}

\item{overlap}{numeric value between 0 and 1, indicating the Jaccard
overlap filter to use for edge nodes. The value is used to
delete edges whose values \code{E(g)$overlap} are below this threshold.}

\item{overlap_count}{numeric value indicating the minimum overlap count
below which edges are removed. The value \code{E(g)$overlap_count} is
used for this filter.}

\item{do_plot}{logical indicating whether to plot the final result.}

\item{do_legend}{logical indicating whether to print a color legend,
valid when \code{do_plot=TRUE}. Arguments \code{...} are also passed to
\code{mem_legend()}, for example \code{x="bottomleft"} can be overriden.}

\item{remove_blanks}{logical indicating whether to call
\code{removeIgraphBlanks()} which removes blank/empty colors in
igraph nodes.}

\item{remove_singlets}{logical indicating whether to remove singlet
nodes, which are nodes that have no connections to other nodes.
By default, singlets are removed, in order to help visualize the
node connections that remain after filtering by \code{overlap}.}

\item{spread_labels}{logical indicating whether to call
\code{spread_igraph_labels()}, which places node labels at an angle offset
from the node, in order to improve default label positions.}

\item{y_bias}{numeric value passed to \code{spread_igraph_labels()} when
\code{spread_labels=TRUE}.}

\item{repulse}{numeric value used for network layout when
\code{layout_with_qfrf()} is used.}

\item{sets}{optional character vector of enriched sets to include,
all other sets will be excluded. These values are matched with
\code{V(g)$name}.}

\item{rescale}{logical indicating whether the \code{igraph} layout
coordinates are scaled to range \code{c(-1, 1)} before plotting.
In practice, when \code{rescale=FALSE} the function \code{jam_igraph()}
is called because it does much better at properly handling
other settings during the change. The effect is mainly to keep
layout aspect intact, in cases where the x- and y-axis ranges
are not roughly the same size, for example a short-wide
layout.}

\item{main}{character string used as the title when \code{do_plot=TRUE}.
This character string is passed to \code{glue::glue()} in order to
include certain argument values such as \code{overlap}.}

\item{...}{additional arguments are passed to \code{removeIgraphBlanks()},
\code{removeIgraphSinglets()}, and \code{spread_igraph_labels()} as needed.}
}
\value{
invisibly returns the \code{igraph} object used for plotting,
a by-product of this function when \code{do_plot=TRUE} is that
the igraph object is also visualized. All custom plot elements
are updated in the \code{igraph} object, so in principle a
simple call to \code{plot(...)} should suffice.
}
\description{
MultiEnrichMap plot
}
\details{
This function takes output from \code{multiEnrichMap()} and produces
customized "multiple enrichMap" plots using an igraph network.
It differs from the data provided from \code{multiEnrichMap()} mostly
by enabling different overlap filters, and by automating
several steps that help with network layout, and node label
placement.

For the most flexible exploration of data, run \code{multiEnrichMap()}
using a lenient \code{overlapThreshold}, for example \code{overlapThreshold=0.1}.
Then call this function with increasing \code{overlap} until the
visualization has insightful structure.
}
\seealso{
Other jam igraph functions: 
\code{\link{cnet2df}()},
\code{\link{cnet2im}()},
\code{\link{cnetplotJam}()},
\code{\link{cnetplot_internalJam}()},
\code{\link{color_edges_by_nodes_deprecated}()},
\code{\link{color_edges_by_nodes}()},
\code{\link{drawEllipse}()},
\code{\link{edge_bundle_bipartite}()},
\code{\link{edge_bundle_nodegroups}()},
\code{\link{enrichMapJam}()},
\code{\link{fixSetLabels}()},
\code{\link{flip_edges}()},
\code{\link{get_bipartite_nodeset}()},
\code{\link{igraph2pieGraph}()},
\code{\link{jam_igraph}()},
\code{\link{jam_plot_igraph}()},
\code{\link{layout_with_qfrf}()},
\code{\link{layout_with_qfr}()},
\code{\link{memIM2cnet}()},
\code{\link{rectifyPiegraph}()},
\code{\link{relayout_with_qfr}()},
\code{\link{removeIgraphBlanks}()},
\code{\link{removeIgraphSinglets}()},
\code{\link{reorderIgraphNodes}()},
\code{\link{rotate_igraph_layout}()},
\code{\link{spread_igraph_labels}()},
\code{\link{subgraph_jam}()},
\code{\link{subsetCnetIgraph}()},
\code{\link{subset_igraph_components}()},
\code{\link{with_qfr}()}

Other jam plot functions: 
\code{\link{adjust_polygon_border}()},
\code{\link{grid_with_title}()},
\code{\link{jam_igraph}()},
\code{\link{mem_enrichment_heatmap}()},
\code{\link{mem_gene_path_heatmap}()},
\code{\link{mem_legend}()},
\code{\link{mem_plot_folio}()},
\code{\link{plot_layout_scale}()}
}
\concept{jam igraph functions}
\concept{jam plot functions}
