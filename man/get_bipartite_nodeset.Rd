% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamgraph-edgebundle.R
\name{get_bipartite_nodeset}
\alias{get_bipartite_nodeset}
\title{Get partite/connected graph nodesets}
\usage{
get_bipartite_nodeset(
  g,
  type = "nodeType",
  set_nodes = NULL,
  sep = ",",
  return_type = c("list", "df"),
  verbose = FALSE,
  ...
)
}
\arguments{
\item{g}{\code{igraph} object that contains one attribute column with
node type.}

\item{type}{\code{character} string of the node/vertex attribute that
represents the node type.}

\item{set_nodes}{\code{character} or \code{NULL}, which contains the set
of node neighbors for the requested nodeset. For example,
one might want all nodes that connect with \code{c("A", "B", "C")}.
When \code{set_nodes=NULL} then all nodesets are returned.}

\item{sep}{\code{character} string used as a delimiter between
node names when defining a nodeset name}

\item{return_type}{\code{character} string indicating the type of
data to return:
\itemize{
\item \code{"list"} returns a list of nodesets, each element in the \code{list}
is a \code{character} vector with node names.
\item \code{"df"} returns a \code{data.frame} with more detailed annotation
for each node, including nodesets, neighbor nodes, etc.
}}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\description{
Get partite/connected graph nodesets defined by shared connections
}
\details{
This method is under development, the intent is to bundle
edges where a large subset of nodes are all connected to
the same node neighbors. A typical graph may not have any
two nodes with the same neighbors, but this situation tends
to happen much more often with bipartite graphs,
where nodes of one type are only permitted to have node
neighbors of the other type. It is not required for this
method to work, however.

The driving scenario is with Cnet (concept network) plots,
which is a bipartite network with \code{"Gene"} and \code{"Set"} nodes.
It is fairly common to have multiple genes present in the
same one or few pathways. As a result, these nodes are
most often positioned near each other as a natural
by-product of having the same connected neighbor nodes.

Identifying a nodeset with identical node neighbors enables
some other useful operations:
\itemize{
\item re-positioning, rotating, expanding, compressing the
whole nodeset layout to improve network graph aesthetics,
node label readability, reducing overlaps
\item edge bundling to improve visual distinctiveness between
multiple nodesets
}
}
\seealso{
Other jam igraph functions: 
\code{\link{cnet2df}()},
\code{\link{cnet2im}()},
\code{\link{cnetplotJam}()},
\code{\link{cnetplot_internalJam}()},
\code{\link{color_edges_by_nodes_deprecated}()},
\code{\link{color_edges_by_nodes}()},
\code{\link{drawEllipse}()},
\code{\link{edge_bundle_bipartite}()},
\code{\link{edge_bundle_nodegroups}()},
\code{\link{enrichMapJam}()},
\code{\link{fixSetLabels}()},
\code{\link{igraph2pieGraph}()},
\code{\link{jam_igraph}()},
\code{\link{jam_plot_igraph}()},
\code{\link{layout_with_qfrf}()},
\code{\link{layout_with_qfr}()},
\code{\link{memIM2cnet}()},
\code{\link{mem_multienrichplot}()},
\code{\link{rectifyPiegraph}()},
\code{\link{relayout_with_qfr}()},
\code{\link{removeIgraphBlanks}()},
\code{\link{removeIgraphSinglets}()},
\code{\link{reorderIgraphNodes}()},
\code{\link{rotate_igraph_layout}()},
\code{\link{spread_igraph_labels}()},
\code{\link{subgraph_jam}()},
\code{\link{subsetCnetIgraph}()},
\code{\link{subset_igraph_components}()},
\code{\link{with_qfr}()}
}
\concept{jam igraph functions}
