% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamenrich-igraph.r
\name{removeIgraphBlanks}
\alias{removeIgraphBlanks}
\title{Remove igraph blank wedges}
\usage{
removeIgraphBlanks(
  g,
  blankColor = c("#FFFFFF", "#FFFFFFFF", "transparent"),
  c_max = 7,
  l_min = 95,
  alpha_max = 0.1,
  constrain = c("nrow", "ncol", "none"),
  resizeNodes = TRUE,
  applyToPie = TRUE,
  pie_to_circle = FALSE,
  pieAttrs = c("pie", "pie.value", "pie.names", "pie.color"),
  verbose = FALSE,
  ...
)
}
\arguments{
\item{g}{igraph object containing one or more attributes from
\code{"pie.color"} or \code{"coloredrect.color"}.}

\item{blankColor}{character vector of R colors directly matched to
the input \code{x} vector. The value \code{"transparent"} is useful here,
because it is not easily converted to HCL color space.}

\item{c_max}{maximum chroma as determined by HCL color space, in
range of no color 0 to maximum color 100.}

\item{l_min}{numeric minimum luminance required for a color to be
considered blank, combined with the \code{c_max} argument. This
threshold prevents grey colors from being considered blank,
unless their luminance is above this threshold.}

\item{alpha_max}{numeric value indicating the alpha transparency
below which a color is considered blank, in range of fully
transparent 0, to fully non-transparent 1.}

\item{constrain}{character value indicating for node shape
\code{"coloredrectangle"} whether to constrain the \code{"coloredrect.nrow"}
or \code{"coloredrect.ncol"} values. When \code{"none"} the nrow is usually
dropped to nrow=1 whenever colors are removed.}

\item{resizeNodes}{logical indicating whether to resize the resulting
nodes to maintain roughly proportional size to the number of
colored wedges.}

\item{applyToPie}{logical indicating whether to apply the logic to
nodes with shape \code{"pie"}.}

\item{pie_to_circle}{logical indicating whether node shapes for
single-color nodes should be changed from \code{"pie"} to \code{"circle"}
in order to remove the small wedge line in each pie node.}

\item{pieAttrs}{character vector of \code{vertex.attributes} from \code{g}
to be adjusted when \code{applyToPie=TRUE}. Note that \code{"pie.color"}
is required, and other attributes are only adjusted when
they are present in the input graph \code{g}.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are passed to \code{isColorBlank()}.}
}
\description{
Remove igraph blank wedges
}
\details{
This function is intended to affect nodes with shapes \code{"pie"} or
\code{"coloredrectangle"}, and evaluates the vertex attributes
\code{"coloredrect.color"} and \code{"pie.color"}. For each node, any colors
considered blank are removed, along with corresponding values in
related vertex attributes, including \verb{"pie","pie.value","pie.names"},
\verb{"coloredrect.names","coloredrect.nrow","coloredrect.ncol","coloredrect.byrow"}.

This function calls \code{isColorBlank()} to determine which colors are
blank.

This function is originally intended to follow \code{igraph2pieGraph()} which
assigns colors to pie and coloredrectangle attributes, where missing
values or values of zero are often given a "blank" color. To enhance the
resulting node coloration, these blank colors can be removed in order to
make the remaining colors more visibly distinct.
}
\examples{
require(igraph);
g <- graph.full(n=3);
V(g)$name <- c("nodeA", "nodeB", "nodeC");
V(g)$shape <- "coloredrectangle";
V(g)$coloredrect.names <- split(
   rep(c("up","no", "dn"), 7),
   rep(V(g)$name, c(2,3,2)*3));
V(g)$coloredrect.byrow <- FALSE;
V(g)$coloredrect.nrow <- rep(3, 3);
V(g)$coloredrect.ncol <- c(2,3,2);
V(g)$label.degree <- pi*3/2;
V(g)$label.dist <- 3;
V(g)$size2 <- c(3, 3, 3);

color_v <- rep("white", 21);
color_v[c(1,3,7,9,15,19,20,21)] <- colorjam::rainbowJam(5);
V(g)$coloredrect.color <- split(
   color_v,
   rep(V(g)$name, c(2,3,2)*3));
par("mfrow"=c(2,2));
lg <- layout_nicely(g);
jam_igraph(g, layout=lg, use_shadowText=TRUE);

g2 <- removeIgraphBlanks(g, constrain="none");
V(g2)$size2 <- V(g2)$size2 / 3;
jam_igraph(g2, layout=lg, use_shadowText=TRUE,
   main="constrain='none'");

g3 <- removeIgraphBlanks(g, constrain="nrow");
jam_igraph(g3, layout=lg, use_shadowText=TRUE,
   main="constrain='nrow'");

g4 <- removeIgraphBlanks(g, constrain="ncol");
jam_igraph(g4, layout=lg, use_shadowText=TRUE,
   main="constrain='ncol'");

#
g7 <- graph.full(n=7);
V(g7)$coloredrect.color <- lapply(c(1,2,3,4,2,3,4),
   function(i){colorjam::rainbowJam(i)});
V(g7)$coloredrect.ncol <- c(1,1,1,1,2,3,4);
V(g7)$coloredrect.nrow <- c(1,2,3,4,1,1,1);
V(g7)$coloredrect.names <- V(g7)$coloredrect.color;
V(g7)$shape <- "coloredrectangle";
V(g7)$size <- 10;
V(g7)$size2 <- V(g7)$coloredrect.ncol * 1;
lg7 <- layout_nicely(g7);
jam_igraph(g7, layout=lg7,
   use_shadowText=TRUE,
   vertex.size2=5);

}
\seealso{
Other jam igraph functions: 
\code{\link{cnet2df}()},
\code{\link{cnet2im}()},
\code{\link{cnetplotJam}()},
\code{\link{cnetplot_internalJam}()},
\code{\link{color_edges_by_nodes_deprecated}()},
\code{\link{color_edges_by_nodes}()},
\code{\link{drawEllipse}()},
\code{\link{edge_bundle_bipartite}()},
\code{\link{edge_bundle_nodegroups}()},
\code{\link{enrichMapJam}()},
\code{\link{fixSetLabels}()},
\code{\link{flip_edges}()},
\code{\link{get_bipartite_nodeset}()},
\code{\link{igraph2pieGraph}()},
\code{\link{jam_igraph}()},
\code{\link{jam_plot_igraph}()},
\code{\link{layout_with_qfrf}()},
\code{\link{layout_with_qfr}()},
\code{\link{memIM2cnet}()},
\code{\link{mem_multienrichplot}()},
\code{\link{rectifyPiegraph}()},
\code{\link{relayout_with_qfr}()},
\code{\link{removeIgraphSinglets}()},
\code{\link{reorderIgraphNodes}()},
\code{\link{rotate_igraph_layout}()},
\code{\link{spread_igraph_labels}()},
\code{\link{subgraph_jam}()},
\code{\link{subsetCnetIgraph}()},
\code{\link{subset_igraph_components}()},
\code{\link{with_qfr}()}
}
\concept{jam igraph functions}
