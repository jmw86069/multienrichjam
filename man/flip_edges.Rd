% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamenrich-igraph.r
\name{flip_edges}
\alias{flip_edges}
\title{Flip direction of igraph edges}
\usage{
flip_edges(g, edge_idx, verbose = FALSE, ...)
}
\arguments{
\item{g}{\code{igraph} object}

\item{edge_idx}{\code{integer} index of edges in the order they are stored
in \code{igraph::E(g)}, or
what igraph calls an "edge sequence" which is a character name
for each node, defined as "node1|node2". For example "D|A" would
define an edge from node name "D" to node name "A".
When \code{verbose=TRUE} a summary table is printed out to show which
edges were flipped.}

\item{verbose}{\code{logical} indicating whether to print verbose output.
When \code{verbose=TRUE} a summary table is printed with these columns:
\itemize{
\item \code{edge_seq}: the input edge sequence, for example when \code{edge_idx}
is provided as a \code{character} vector, the input vector is printed
here.
\item \code{edge_seq_matched}: edge sequence that matched the \code{g} object.
For example, when \code{edge_idx} input is a \code{character} vector, only
the edges that match the \code{g} input are included here.
\item \code{edge_idx}: the integer index values of edges flipped.
An \code{NA} value indicates the edge was not flipped, which should
only happen when input \code{edge_idx} is provided as a \code{character}
vector and some edges do not match the \code{g} input.
}}

\item{...}{additional arguments are ignored.}
}
\description{
Flip direction of igraph edges
}
\details{
This function simply flips the direction of igraph edges,
keeping all other node and edge attributes.

Note that this function will flip the order of nodes for each
edge defined by \code{edge_idx}, regardless whether the \code{igraph}
itself is a directed graph.

When \code{edge_idx} is provided as a \code{character} vector edge sequence,
any entries that do not match edges in \code{g} are ignored. A summary
table is printed when \code{verbose=TRUE}.
}
\examples{
am <- matrix(ncol=5, nrow=5, byrow=TRUE,
   data=c(0,0,0,0,0,
      1,0,0,0,0,
      1,0,0,0,0,
      1,0,0,0,0,
      1,0,0,0,0),
   dimnames=list(head(LETTERS, 5),
      head(LETTERS, 5)))
am;
g1 <- igraph::graph_from_adjacency_matrix(am)
plot(g1);
g2 <- flip_edges(g1, 3:4);
plot(g2);

}
\seealso{
Other jam igraph functions: 
\code{\link{cnet2df}()},
\code{\link{cnet2im}()},
\code{\link{cnetplotJam}()},
\code{\link{cnetplot_internalJam}()},
\code{\link{color_edges_by_nodegroups}()},
\code{\link{color_edges_by_nodes}()},
\code{\link{color_edges_by_nodes_deprecated}()},
\code{\link{color_nodes_by_nodegroups}()},
\code{\link{communities2nodegroups}()},
\code{\link{drawEllipse}()},
\code{\link{edge_bundle_bipartite}()},
\code{\link{edge_bundle_nodegroups}()},
\code{\link{enrichMapJam}()},
\code{\link{fixSetLabels}()},
\code{\link{get_bipartite_nodeset}()},
\code{\link{igraph2pieGraph}()},
\code{\link{jam_igraph}()},
\code{\link{jam_plot_igraph}()},
\code{\link{label_communities}()},
\code{\link{layout_with_qfr}()},
\code{\link{layout_with_qfrf}()},
\code{\link{mem2emap}()},
\code{\link{memIM2cnet}()},
\code{\link{mem_multienrichplot}()},
\code{\link{nodegroups2communities}()},
\code{\link{rectifyPiegraph}()},
\code{\link{relayout_with_qfr}()},
\code{\link{removeIgraphBlanks}()},
\code{\link{removeIgraphSinglets}()},
\code{\link{reorderIgraphNodes}()},
\code{\link{rotate_igraph_layout}()},
\code{\link{spread_igraph_labels}()},
\code{\link{subgraph_jam}()},
\code{\link{subsetCnetIgraph}()},
\code{\link{subset_igraph_components}()},
\code{\link{sync_igraph_communities}()},
\code{\link{with_qfr}()}
}
\concept{jam igraph functions}
